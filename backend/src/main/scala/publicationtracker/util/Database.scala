package publicationtracker.util

import cats.effect.*
import cats.syntax.flatMap.*
import cats.syntax.functor.*
import doobie.*
import doobie.hikari.*
import doobie.implicits.*
import doobie.util.ExecutionContexts
import doobie.util.transactor.Transactor
import org.flywaydb.core.Flyway
import org.typelevel.log4cats.Logger
import org.typelevel.log4cats.slf4j.Slf4jLogger

object Database {

  def transactor[F[_]: Async]: Resource[F, HikariTransactor[F]] = {
    val conf = DatabaseConfig.load()
    val dbName = conf.url.split("/").lastOption.getOrElse("publication_db")

    for {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ log4cats
      given Logger[F] <- Resource.eval(Slf4jLogger.create[F])

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      _ <- Resource.eval(ensureDatabaseExists[F](conf, dbName))

      // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Flyway
      _ <- Resource.eval(runMigrations[F](conf))

      // 3. –°–æ–∑–¥–∞—ë–º ExecutionContext –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      connectEC <- ExecutionContexts.fixedThreadPool[F](conf.poolSize)

      // 4. –°–æ–∑–¥–∞—ë–º HikariTransactor
      transactor <- HikariTransactor.newHikariTransactor[F](
        driverClassName = conf.driver,
        url             = conf.url,
        user            = conf.user,
        pass            = conf.password,
        connectEC       = connectEC
      )

      // 5. –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ç–æ—Ä–∞
      _ <- Resource.eval(Logger[F].info("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."))
    } yield transactor
  }

  import cats.effect.Async
  import doobie.Fragment
  import org.typelevel.log4cats.Logger

  private def ensureDatabaseExists[F[_]: Async](conf: DbConfig, dbName: String)(using Logger[F]): F[Unit] = {
    val adminUrl = conf.url
      .replaceFirst(s"/" + dbName, "/postgres") +
      s"?user=${conf.user}&password=${conf.password}"

    val xa = Transactor.fromDriverManager[F](
      driver = conf.driver,
      url = adminUrl,
      logHandler = None
    )

    val checkExists =
      sql"SELECT 1 FROM pg_database WHERE datname = $dbName"
        .query[Int]
        .option
        .map(_.isDefined)

    for {
      _ <- Logger[F].info(s"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '$dbName'")
      exists <- checkExists.transact(xa)
      _ <- if (exists) {
        Logger[F].info(s"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '$dbName' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
      } else {
        for {
          _ <- Logger[F].warn(s"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '$dbName' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—ë–º...")
          _ <- Async[F].delay {
            // –í—ã–ø–æ–ª–Ω—è–µ–º create database –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ JDBC –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            val conn = java.sql.DriverManager.getConnection(adminUrl, conf.user, conf.password)
            try {
              val stmt = conn.createStatement()
              // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –±–∞–∑—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
              stmt.executeUpdate(s"""CREATE DATABASE "$dbName"""")
              stmt.close()
            } finally conn.close()
          }
          _ <- Logger[F].info(s"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '$dbName' —Å–æ–∑–¥–∞–Ω–∞.")
        } yield ()
      }
    } yield ()
  }


  private def runMigrations[F[_]: Sync](conf: DbConfig): F[Unit] = Sync[F].delay {
    val flyway = Flyway.configure()
      .dataSource(conf.url, conf.user, conf.password)
      .locations("classpath:db/migration")
      .load()

    val count = flyway.migrate()
    println(s"‚úÖ Flyway: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ $count –º–∏–≥—Ä–∞—Ü–∏–π.")
  }
}
